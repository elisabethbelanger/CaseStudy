%% Audio Equilizer Function
% The function takes in inputs for the gain factors and input signal with
% its sampling freqency. Input is passed through 3 bandpass filters made
% from low- and high-pass RC circuits and a single low pass at the highest
% frequencies and a single high-pass at lowest frequencies.
%
% * Inputs:
% 
% # xv: N x 1 vector of audio signal
% # xvfs: integer corresponding to sampling frequency of the audio
% # xv: N x 1 vector of audio signal
% # xvfs: integer corresponding to sampling frequency of the audio
% # g1 - g5: integer values of the desired gain for each of the 5 filters
%
% * Output: y: N x 1 vector of the filtered signal
% 

function y = equilizer(xv, xvfs, g1, g2, g3, g4, g5)

fc1 = 60;
tao1 = 1/(2*pi*fc1);
fs =xvfs;

% Low pass - 60 hz 
x1 = filter((1/fs)/tao1, [(1/fs)/tao1+1, -1], xv);
fc2 = 680;
tao1 = 1/(2*pi*fc1);
tao2 = 1/(2*pi*fc2);
fs =xvfs;

% BP1  -> 3320
% Low pass
x2 = filter((1/fs)/tao2, [(1/fs)/tao2+1, -1], xv);

% High pass
x2 = filter([1, -1], [(1+(1/fs)/tao1), -1], x2);

fc3 = 3320;
tao3 = 1/(2*pi*fc3);
fs =xvfs;

% Low pass
x3 = filter((1/fs)/tao3, [(1/fs)/tao3+1, -1], xv);

% High pass
x3 = filter([1, -1], [(1+(1/fs)/tao2), -1], x3);

fc4 = 12680;
tao4 = 1/(2*pi*fc4);
fs =xvfs;

% Low pass
x4 = filter((1/fs)/tao4, [1+(1/fs)/tao4, -1], xv);

% High pass
x4 = filter([1, -1], [(1+(1/fs)/tao3), -1], x4);

% High pass
x5 = filter([1, -1], [(1+(1/fs)/tao4), -1], xv);

y = mean(abs(xv))*(g1*x1/mean(abs(x1)) + g2*x2/mean(abs(x2)) + g3*x3/mean(abs(x3)) + g4*x4/mean(abs(x4)) + g5*x5/mean(abs(x5)));

end